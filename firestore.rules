rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /{document=**} {
      allow read: if true;
    }
    // Users
    match /users/{userId} {
     function leagueId() {
    	return request.resource.data.leagues.keys();
    }
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      // allow league admins and club manager to make updates
      allow update: if request.auth != null 
      && request.resource.data.leagues.keys() != []
      &&  resource.data.leagues.keys().hasAll(leagueId())
      && (request.resource.data.leagues.diff(resource.data.leagues).affectedKeys()
        .hasAll(leagueId()));
    }

  // League
    match /leagues/{leagueId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/leagues/$(leagueId)).data.adminId == request.auth.uid;
    }

    function isNotScheduled() {
      return get(/databases/$(database)/documents/leagues/$(leagueId)).data.scheduled == false
    }
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
      // Club
      match /clubs/{clubId} {
        allow create: if request.auth != null && isNotScheduled()
        allow update: if request.auth != null && request.auth.uid == resource.data.managerId || isAdmin()
        allow delete: if request.auth != null && request.auth.uid == resource.data.managerId && isNotScheduled()
        allow delete: if isAdmin() && isNotScheduled()
        // allow player to create entry in the club's roster
        allow update: if request.auth != null && (request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['roster']));
      }
      // Stats
      match /stats/{document=**} {
        allow write: if false;
      }
      // Matches
      match /matches/{matchId} {
        allow update: if request.auth != null 
        && resource.data.published == false 
        && resource.data.conflict == false 
        && (request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['submissions']))
      }
    }

  }
}